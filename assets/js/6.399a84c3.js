(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{324:function(a,s,t){a.exports=t.p+"assets/img/ScreenShort2020-04-21PM5.04.59.5d1d2221.png"},338:function(a,s,t){"use strict";t.r(s);var e=t(33),n=Object(e.a)({},(function(){var a=this,s=a.$createElement,e=a._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"docker-入门教程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-入门教程"}},[a._v("#")]),a._v(" Docker 入门教程")]),a._v(" "),e("p",[e("img",{attrs:{src:t(324),alt:"An image"}})]),a._v(" "),e("h2",{attrs:{id:"环境配置的难题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#环境配置的难题"}},[a._v("#")]),a._v(" 环境配置的难题")]),a._v(" "),e("p",[a._v("用户计算机的环境都不相同，你怎么知道自家的软件，能在那些机器跑起来？")]),a._v(" "),e("h2",{attrs:{id:"虚拟机"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#虚拟机"}},[a._v("#")]),a._v(" 虚拟机")]),a._v(" "),e("p",[a._v("虚拟机（virtual machine）是带环境安装的一种解决方案。")]),a._v(" "),e("p",[a._v("缺点：占资源、步骤多、启动慢")]),a._v(" "),e("h2",{attrs:{id:"linux-容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#linux-容器"}},[a._v("#")]),a._v(" Linux 容器")]),a._v(" "),e("p",[a._v("Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。")]),a._v(" "),e("p",[a._v("缺点：不占资源、体积小、启动快")]),a._v(" "),e("h2",{attrs:{id:"docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[a._v("#")]),a._v(" Docker")]),a._v(" "),e("p",[a._v("Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。")]),a._v(" "),e("h2",{attrs:{id:"实例：hello-world"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实例：hello-world"}},[a._v("#")]),a._v(" 实例：hello world")]),a._v(" "),e("p",[a._v("通过最简单的 "),e("code",[a._v("image")]),a._v(" 文件 "),e("code",[a._v("hello world")]),a._v("，感受一下 "),e("code",[a._v("Docker")]),a._v(":")]),a._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[a._v("$ docker container run hello-world\n")])])]),e("p",[a._v("如果运行成功，你会在屏幕上读到下面的输出:")]),a._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[a._v("Hello from Docker"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("\nThis message shows that your installation appears to be working correctly.\n")])])]),e("h2",{attrs:{id:"实例：制作自己的-docker-容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实例：制作自己的-docker-容器"}},[a._v("#")]),a._v(" 实例：制作自己的 Docker 容器")]),a._v(" "),e("p",[a._v("准备一个练手的 "),e("code",[a._v("koa-demos")]),a._v(" 项目：")]),a._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone https://github.com/ruanyf/koa-demos.git\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" koa-demos\n")])])]),e("p",[a._v("在项目的根目录下，新建 "),e("code",[a._v(".dockerignore")]),a._v(" 文件, 排除无需打包到 image 的文件：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(".git\nnode_modules\nnpm-debug.log\n")])])]),e("p",[a._v("在项目的根目录下， 新建 "),e("code",[a._v("Dockerfile")]),a._v(" 文件：")]),a._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[a._v("FROM node:8.4   "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 该 image 文件继承官方的 node image，版本 8.4")]),a._v("\nCOPY "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v(" /app     "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 拷贝当前目录下的所有文件到 image 文件的 /app 目录")]),a._v("\nWORKDIR /app    "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 指定接下来的工作路径为 /app")]),a._v("\nRUN "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("npm")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 在 /app 目录下，运行 npm install 命令安装依赖")]),a._v("\nEXPOSE "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("3000")]),a._v("     "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 将容器的 3000 端口暴露给外部")]),a._v("\n")])])]),e("p",[a._v("创建 "),e("code",[a._v("image")]),a._v(" 文件：")]),a._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[a._v("$ docker image build -t koa-demo "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# `-t` 指定文件名, `.` 表示当前路径")]),a._v("\n")])])]),e("p",[a._v("如果运行成功，就可以看到新生成的 image 文件 koa-demo 了。")]),a._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[a._v("$ docker image "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v("\n")])])]),e("p",[a._v("从 image 文件生成容器实例：")]),a._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# -p：容器的 3000 端口映射到本机的 8000 端口")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# -it：容器的 Shell 映射到本机窗口当前的 Shell")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# koa-demo:0.0.1：image 文件的名字")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# /bin/bash：容器启动以后，内部第一个执行的命令")]),a._v("\n$ docker container run -p "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("8000")]),a._v(":3000 -it koa-demo /bin/bash\n")])])]),e("p",[a._v("如果一切正常，会返回一个命令行提示符：")]),a._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[a._v("root@66d80f4aaf1e:/app"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#")]),a._v("\n")])])]),e("p",[a._v("这表示你已经在容器里面了，返回的提示符就是容器内部的 Shell 提示符。执行下面的命令:")]),a._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[a._v("root@66d80f4aaf1e:/app"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# node demos/01.js")]),a._v("\n")])])]),e("p",[a._v("这时，Koa 框架已经运行起来了。打开本机的浏览器，访问 "),e("code",[a._v("http://127.0.0.1:8000")]),a._v(" 会显示 "),e("code",[a._v("Not Found")]),a._v("。")]),a._v(" "),e("p",[a._v("测试完毕，销毁容器：")]),a._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 在容器的命令行按下 Ctrl + c 停止 Node 进程")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 按下 Ctrl + d 退出容器")]),a._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 在本机的另一个终端窗口，查出容器的 ID")]),a._v("\n$ docker container "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 停止指定的容器运行")]),a._v("\n$ docker container "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("kill")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("containerID"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 查出所有容器的 ID")]),a._v("\n$ docker container "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v(" --all\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 删除指定的容器文件")]),a._v("\n$ docker container "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("containerID"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);